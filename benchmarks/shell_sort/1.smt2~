(set-logic QF_LIA)
;44)
;time-consuming:0.11
; 
(set-info :status sat)
(declare-fun symbol_1 () Int)
(declare-fun symbol_0 () Int)
(declare-fun symbol_2 () Int)
(declare-fun symbol_3 () Int)
(declare-fun symbol_5 () Int)
(declare-fun symbol_4 () Int)
(declare-fun symbol_6 () Int)
(declare-fun symbol_7 () Int)
(declare-fun symbol_8 () Int)
(declare-fun symbol_9 () Int)
(declare-fun symbol_10 () Int)
(declare-fun symbol_11 () Int)
(declare-fun symbol_12 () Int)
(declare-fun symbol_13 () Int)
(declare-fun symbol_14 () Int)
(declare-fun symbol_15 () Int)
(assert
 (> (- symbol_0 symbol_1) 0))
(assert
 (let ((?x1328 (+ symbol_2 1)))
 (>= ?x1328 symbol_2)))
(assert
 (let ((?x1328 (+ symbol_2 1)))
 (< ?x1328 symbol_3)))
(assert
 (not (> (- symbol_4 symbol_5) 0)))
(assert
 (let ((?x1733 (- symbol_2 symbol_2)))
 (let ((?x125 (- ?x1733 symbol_2)))
 (let ((?x2046 (- ?x125 symbol_2)))
 (let ((?x2745 (- ?x2046 symbol_2)))
 (>= (- ?x2745 symbol_2) symbol_2))))))
(assert
 (> (- symbol_6 symbol_5) 0))
(assert
 (let ((?x1733 (- symbol_2 symbol_2)))
 (let ((?x125 (- ?x1733 symbol_2)))
 (let ((?x2046 (- ?x125 symbol_2)))
 (let ((?x2745 (- ?x2046 symbol_2)))
 (>= ?x2745 symbol_2))))))
(assert
 (> (- symbol_7 symbol_5) 0))
(assert
 (let ((?x1733 (- symbol_2 symbol_2)))
 (let ((?x125 (- ?x1733 symbol_2)))
 (let ((?x2046 (- ?x125 symbol_2)))
 (>= ?x2046 symbol_2)))))
(assert
 (> (- symbol_8 symbol_5) 0))
(assert
 (let ((?x1733 (- symbol_2 symbol_2)))
 (let ((?x125 (- ?x1733 symbol_2)))
 (>= ?x125 symbol_2))))
(assert
 (> (- symbol_9 symbol_5) 0))
(assert
 (let ((?x1733 (- symbol_2 symbol_2)))
 (>= ?x1733 symbol_2)))
(assert
 (> (- symbol_10 symbol_5) 0))
(assert
 (>= symbol_2 symbol_2))
(assert
 (< symbol_2 symbol_3))
(assert
 (not (> (* symbol_2 2) (/ symbol_3 2))))
(assert
 (let ((?x1736 (/ symbol_3 2)))
 (> (* symbol_11 2) ?x1736)))
(assert
 (let ((?x1736 (/ symbol_3 2)))
 (> (* symbol_12 2) ?x1736)))
(assert
 (let ((?x1736 (/ symbol_3 2)))
 (> (* symbol_13 2) ?x1736)))
(assert
 (let ((?x1736 (/ symbol_3 2)))
 (> (* symbol_14 2) ?x1736)))
(assert
 (let ((?x1736 (/ symbol_3 2)))
 (> (* symbol_15 2) ?x1736)))
(assert
 (not (<= symbol_3 1)))
(check-sat)
