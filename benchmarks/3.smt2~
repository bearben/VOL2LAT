(set-logic QF_LIA)
;2194)
;time-consuming:0.18
; 
(set-info :status sat)
(declare-fun symbol_1 () Real)
(declare-fun symbol_0 () Real)
(declare-fun symbol_2 () Real)
(declare-fun symbol_3 () Real)
(declare-fun symbol_4 () Real)
(declare-fun symbol_6 () Real)
(declare-fun symbol_5 () Real)
(declare-fun symbol_7 () Real)
(declare-fun symbol_9 () Real)
(declare-fun symbol_8 () Real)
(declare-fun symbol_10 () Real)
(declare-fun symbol_11 () Real)
(declare-fun symbol_12 () Real)
(declare-fun symbol_13 () Real)
(declare-fun symbol_14 () Real)
(declare-fun symbol_15 () Real)
(declare-fun symbol_16 () Real)
(declare-fun symbol_17 () Real)
(declare-fun symbol_18 () Real)
(declare-fun symbol_19 () Real)
(declare-fun symbol_20 () Real)
(declare-fun symbol_21 () Real)
(declare-fun symbol_22 () Real)
(assert
 (> (- symbol_0 symbol_1) 0))
(assert
 (>= (- (+ (+ symbol_2 1) 1) symbol_2) symbol_2))
(assert
 (> (- symbol_3 symbol_1) 0))
(assert
 (let ((?x2476 (+ symbol_2 1)))
 (let ((?x950 (+ ?x2476 1)))
 (>= ?x950 symbol_2))))
(assert
 (let ((?x2476 (+ symbol_2 1)))
 (let ((?x950 (+ ?x2476 1)))
 (< ?x950 symbol_4))))
(assert
 (not (> (- symbol_5 symbol_6) 0)))
(assert
 (>= (- (+ symbol_2 1) symbol_2) symbol_2))
(assert
 (> (- symbol_7 symbol_6) 0))
(assert
 (let ((?x2476 (+ symbol_2 1)))
 (>= ?x2476 symbol_2)))
(assert
 (let ((?x2476 (+ symbol_2 1)))
 (< ?x2476 symbol_4)))
(assert
 (not (> (- symbol_8 symbol_9) 0)))
(assert
 (let ((?x3624 (- symbol_2 symbol_2)))
 (let ((?x308 (- ?x3624 symbol_2)))
 (let ((?x3269 (- ?x308 symbol_2)))
 (let ((?x762 (- ?x3269 symbol_2)))
 (>= (- ?x762 symbol_2) symbol_2))))))
(assert
 (> (- symbol_10 symbol_9) 0))
(assert
 (let ((?x3624 (- symbol_2 symbol_2)))
 (let ((?x308 (- ?x3624 symbol_2)))
 (let ((?x3269 (- ?x308 symbol_2)))
 (let ((?x762 (- ?x3269 symbol_2)))
 (>= ?x762 symbol_2))))))
(assert
 (> (- symbol_11 symbol_9) 0))
(assert
 (let ((?x3624 (- symbol_2 symbol_2)))
 (let ((?x308 (- ?x3624 symbol_2)))
 (let ((?x3269 (- ?x308 symbol_2)))
 (>= ?x3269 symbol_2)))))
(assert
 (> (- symbol_12 symbol_9) 0))
(assert
 (let ((?x3624 (- symbol_2 symbol_2)))
 (let ((?x308 (- ?x3624 symbol_2)))
 (>= ?x308 symbol_2))))
(assert
 (> (- symbol_13 symbol_9) 0))
(assert
 (let ((?x3624 (- symbol_2 symbol_2)))
 (>= ?x3624 symbol_2)))
(assert
 (> (- symbol_14 symbol_9) 0))
(assert
 (>= symbol_2 symbol_2))
(assert
 (< symbol_2 symbol_4))
(assert
 (not (> symbol_2 (/ symbol_4 2))))
(assert
 (let ((?x6062 (/ symbol_4 2)))
 (> symbol_15 ?x6062)))
(assert
 (let ((?x6062 (/ symbol_4 2)))
 (> symbol_16 ?x6062)))
(assert
 (let ((?x6062 (/ symbol_4 2)))
 (> symbol_17 ?x6062)))
(assert
 (let ((?x6062 (/ symbol_4 2)))
 (> symbol_18 ?x6062)))
(assert
 (let ((?x6062 (/ symbol_4 2)))
 (> symbol_19 ?x6062)))
(assert
 (let ((?x6062 (/ symbol_4 2)))
 (> symbol_20 ?x6062)))
(assert
 (let ((?x6062 (/ symbol_4 2)))
 (> symbol_21 ?x6062)))
(assert
 (let ((?x6062 (/ symbol_4 2)))
 (> symbol_22 ?x6062)))
(assert
 (not (<= symbol_4 1)))
(check-sat)
